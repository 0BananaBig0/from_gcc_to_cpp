#################################################################
#											 Makefile
#		Makefile to build exe
#################################################################
.PHONY: all dbg test clean
# Define the compiler variable
CC = g++

# List all .cpp files, .o files, .a files and .so files
SRCS = Main.cpp Fun.cpp FunN.cpp Sort.cpp BubbleSort.cpp MergeSort.cpp MergeSortLayerByLayer.cpp SelectionSort.cpp
OBJ_SRCS = $(filter-out Fun.cpp FunN.cpp, $(SRCS))
OBJS = $(patsubst %.cpp, %.o, $(OBJ_SRCS))
STATIC_LIBS = libFun.a
SHARED_LIBS = libFunN.so
TARGET = Main.exe
DBG =
TEST_MACRO =

# Generate a list of .d files from SRCS
DEPS = $(SRCS:.cpp=.d)

# Default target:
# $(TARGET): $(OBJS)
#		$(CC) -o $@ $^
all: $(TARGET)
$(TARGET): $(OBJS) $(STATIC_LIBS) $(SHARED_LIBS)
	$(CC) -Ofast $(DBG) $(TEST_MACRO) -o $@ $(OBJS) -Wl,--as-needed -L. -lFun -lFunN

# The rule for # *.d is generated by *.cpp:
%.d: %.cpp
	$(CC) -MM $< > $@.tmp
	sed "s,\($*\)\.o[ :]*,\1.o $@ : ,g" < $@.tmp > $@;
	rm -f $@.tmp

# Pattern rules:
%.o: %.cpp
	$(CC) -Ofast -c $(DBG) $(TEST_MACRO) -fPIC -o $@ $<

# Rule to create the static library from Fun.cpp
$(STATIC_LIBS): lib%.a: %.o
	ar rcs $@ $<

# Rule to create the shared library from Fun.cpp
$(SHARED_LIBS): lib%.so: %.o
	$(CC) -shared -o $@ $<

dbg:
	$(MAKE) all DBG="-g"

test:
	$(MAKE) all TEST_MACRO=-DTEST_SORT

clean:
	@echo "Cleaning up ......"
	@-rm -rf *.exe *.o *.i *.s *.a *.so *.d # - prefix for ignoring errors

# Include all .d files: inform make to generate all .d files
include $(DEPS)


